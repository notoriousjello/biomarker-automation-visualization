mutate('Intraplate CV' = mean(as.numeric(`Calc. Conc. CV`))) %>%
ungroup
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_") %>%
group_by(Sample) %>%
mutate('Intraplate CV' = mean(as.numeric(`Calc. Conc. CV`))) %>%
ungroup
intraplate_cvs_qc <- distinct(intraplate_cvs_qc,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_qc) <- paste(colnames(intraplate_cvs_qc),
"QC",
sep = "_")
colnames(intraplate_cvs_qc)[1] = "QC"
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE LOCATION OF THE RAW DATA EXCEL
raw <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO "STUDY_ASSAY_DATA_ANALYZED.xlsx
path = paste(x, "CHR_Ang1Ang2_20230209_ANALYZED.xlsx",
sep = "_")))
# This creates a single file of all the sets in the MSD Data rather than plate by plate
raw <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
source("./automation.R")
total <- automation(raw)
write_xlsx(total,
path = "CHR_Ang1Ang2_20230209_ALL_PLATES_ANALYZED.xlsx")
raw_data <- raw_data %>%
if (`Detection Range` == "Below Detection Range") {
raw_data$`Detection Range` == -89
} else if (`Detection Range` == "Above Detection Range") {
raw_data$`Detection Range` == -99
} else {}
raw_data <- raw_data %>%
if (raw_data`Detection Range` == "Below Detection Range") {
raw_data$`Detection Range` = -99
raw_data <- raw_data %>%
if (`Detection Range` = "Below Detection Range") {
raw_data$`Detection Range` == -99
raw_data <- raw_data %>%
if (`Detection Range` == "Below Detection Range") {
raw_data$`Detection Range` == -89
} else if (`Detection Range` == "Above Detection Range") {
raw_data$`Detection Range` == -99
} else {}
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Detection Range"] <- -89
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
README <- read_excel("ReadME_Template.xlsx")
# makes a list of all of the plates in the plate name column
biomarker_plates <- as.list(unique(
raw_data$`Plate Name`))
print(biomarker_plates)
# reads a specific plate from the raw data file
raw_data <- raw_data %>%
filter(`Plate Name` == "Plate_2BM80AE373_Set1")
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Detection Range"] <- -89
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
README <- read_excel("ReadME_Template.xlsx")
# makes a list of all of the plates in the plate name column
biomarker_plates <- as.list(unique(
raw_data$`Plate Name`))
print(biomarker_plates)
# reads a specific plate from the raw data file
raw_data <- raw_data %>%
filter(`Plate Name` == "Plate_2BM80AE373_Set1")
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Detection Range"] <- -89
View(raw_data)
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
README <- read_excel("ReadME_Template.xlsx")
# makes a list of all of the plates in the plate name column
biomarker_plates <- as.list(unique(
raw_data$`Plate Name`))
print(biomarker_plates)
# reads a specific plate from the raw data file
raw_data <- raw_data %>%
filter(`Plate Name` == "Plate_2BM80AE373_Set1")
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Fit Curve Range"] <- -89
View(raw_data)
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE LOCATION OF THE RAW DATA EXCEL
raw <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Below Fit Curve Range"] <- -89
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Above Fit Curve Range"] <- -99
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO "STUDY_ASSAY_DATA_ANALYZED.xlsx
path = paste(x, "CHR_Ang1Ang2_20230209_ANALYZED.xlsx",
sep = "_")))
# This creates a single file of all the sets in the MSD Data rather than plate by plate
raw <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
source("./automation.R")
total <- automation(raw)
write_xlsx(total,
path = "CHR_Ang1Ang2_20230209_ALL_PLATES_ANALYZED.xlsx")
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# imports the raw data excel file
raw <- read_excel("raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
# separates out the raw data to append an identifier to PE samples
raw_std <- raw %>%
filter(`Sample Group` == "Standards")
raw_qc <- raw %>%
filter(`Sample Group` == "QC")
raw_pe <- raw %>%
filter(`Sample Group` == "PE")
raw_blanks <- raw %>%
filter(`Sample Group` == "Blanks")
# appends the identifier
raw_pe$Sample <- paste(raw_pe$Sample, "V1",
sep = "_")
# binds the data back into a single data frame
raw <- rbind(raw_std, raw_qc, raw_pe, raw_blanks)
# writes the new raw data file to an excel
write_xlsx(raw,
path = "raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
View(raw)
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE LOCATION OF THE RAW DATA EXCEL
raw <- read_excel("B:\CITRC\Plasma Biomarker August 2022\Ang1Ang2\All_Ang1Ang2_Data_Set1-11_RAW.xlsx")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE LOCATION OF THE RAW DATA EXCEL
raw <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\Ang1Ang2\\All_Ang1Ang2_Data_Set1-11_RAW.xlsx")
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Below Fit Curve Range"] <- -99
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Above Fit Curve Range"] <- -89
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO "STUDY_ASSAY_DATA_ANALYZED.xlsx
path = paste(x, "CIT_Ang1Ang2_ANALYZED.xlsx",
sep = "_")))
# This creates a single file of all the sets in the MSD Data rather than plate by plate
source("./automation.R")
total <- automation(raw)
write_xlsx(total,
path = "CIT_Ang1Ang2_ALL_PLATES_ANALYZED.xlsx")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE LOCATION OF THE RAW DATA EXCEL
raw <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\TNFR-1\\All_TNFR1_Data_Set1-11_RAW.xlsx")
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Above Fit Curve Range"] <- -89
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Below Fit Curve Range"] <- -99
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE LOCATION OF THE RAW DATA EXCEL
raw <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\TNFR-1\\All_TNFR1_Data_Set1-11_RAW.xlsx")
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Below Fit Curve Range"] <- -99
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Above Fit Curve Range"] <- -89
# This creates a single file of all the sets in the MSD Data rather than plate by plate
source("./automation.R")
total <- automation(raw)
total <- automation(raw)
View(raw)
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE LOCATION OF THE RAW DATA EXCEL
raw <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\TNFR-1\\All_TNFR1_Data_Set1-11_RAW.xlsx")
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Below Fit Curve Range"] <- -99
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Above Fit Curve Range"] <- -89
# This creates a single file of all the sets in the MSD Data rather than plate by plate
source("./automation.R")
total <- automation(raw)
write_xlsx(total,
path = "B:\CITRC\\Plasma Biomarker August 2022\\TNFR-1\\CIT_TNFR1_ALL_PLATES_ANALYZED.xlsx")
# This creates a single file of all the sets in the MSD Data rather than plate by plate
source("./automation.R")
total <- automation(raw)
write_xlsx(total,
path = "B:\\CITRC\\Plasma Biomarker August 2022\\TNFR-1\\CIT_TNFR1_ALL_PLATES_ANALYZED.xlsx")
# Allows us to read in excel files
library(readxl)
library(writexl)
# Allows us to read in excel files
library("readxl")
library("writexl")
Ang <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\Ang1Ang2\\CIT_Ang1Ang2_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
TNFR1 <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\TNFR-1\\CIT_TNFR1_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
View(TNFR1)
View(Ang)
master_sample_data <- merge(Ang, TNFR1,
by = "Sample",
all.y = TRUE)
write_xlsx(
master_sample_data,
path = "CITRC//processed_data//CITRC_Sample_Data_Master_01042023.xlsx",
col_names = TRUE
)
View(master_sample_data)
master_sample_data <- master_sample_data %>%
mutuate_if(is.character, as.numeric)
master_sample_data <- master_sample_data %>%
mutate_if(is.character, as.numeric)
View(master_sample_data)
master_sample_data <- master_sample_data %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.numeric, round, digits = 10)
View(master_sample_data)
master_sample_data <- master_sample_data %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.numeric, round, digits = 5)
View(master_sample_data)
View(master_sample_data)
master_sample_data <- master_sample_data %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.numeric, round, digits = 5) %>%
mutate_if(-99.00000, -99) %>%
mutate_if(-89.00000, -89)
master_sample_data[master_sample_data == -99.00000] <- -99
View(master_sample_data)
View(master_sample_data)
# Allows us to read in excel files
library("readxl")
library("writexl")
Ang <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\Ang1Ang2\\CIT_Ang1Ang2_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
TNFR1 <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\TNFR-1\\CIT_TNFR1_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
master_sample_data <- merge(Ang, TNFR1,
by = "Sample",
all.y = TRUE)
master_sample_data <- master_sample_data %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.numeric, round, digits = 5)
master_sample_data[master_sample_data == -99.00000] <- -99
write_xlsx(
master_sample_data,
path = "CITRC//processed_data//CITRC_Sample_Data_Master_03212023.xlsx",
col_names = TRUE
)
# CHROME STUDY
chr_ang <- read_excel("B:\\CHROME\\Plasma\\Ang1Ang2\\2023-02-08\\CHR_Ang1Ang2_20230209_ALL_PLATES_ANALYZED.xlsx")
srage <- read_excel("B:\\CHROME\\Plasma\\sRAGE\\2023-02-08\\CHR_sRAGE_20230213_ALL_PLATES_ANALYZED.xlsx")
# Allows us to read in excel files
library("readxl")
library("writexl")
# CITRC STUDY
# imports the citrc MSD data
cit_Ang <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\Ang1Ang2\\CIT_Ang1Ang2_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
cit_TNFR1 <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\TNFR-1\\CIT_TNFR1_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
# merges the two dataframes using the sample column
cit_master_sample_data <- merge(Ang, TNFR1,
by = "Sample",
all.y = TRUE)
# Allows us to read in excel files
library("readxl")
library("writexl")
# CITRC STUDY
# imports the citrc MSD data
cit_Ang <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\Ang1Ang2\\CIT_Ang1Ang2_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
cit_TNFR1 <- read_excel("B:\\CITRC\\Plasma Biomarker August 2022\\TNFR-1\\CIT_TNFR1_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
# merges the two dataframes using the sample column
cit_master_sample_data <- merge(cit_Ang, cit_TNFR1,
by = "Sample",
all.y = TRUE)
# converts the columns to numeric and then rounds them
cit_master_sample_data <- cit_master_sample_data %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.numeric, round, digits = 5)
# writes the dataframe to an excel document
write_xlsx(
cit_master_sample_data,
path = "CITRC//processed_data//CITRC_Sample_Data_Master_03212023.xlsx",
col_names = TRUE
)
# CHROME STUDY
chr_ang <- read_excel("B:\\CHROME\\Plasma\\Ang1Ang2\\2023-02-08\\CHR_Ang1Ang2_20230209_ALL_PLATES_ANALYZED.xlsx")
chr_srage <- read_excel("B:\\CHROME\\Plasma\\sRAGE\\2023-02-08\\CHR_sRAGE_20230213_ALL_PLATES_ANALYZED.xlsx")
chr_master_sample_data <- chr_master_sample_data %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.numeric, round, digits = 5)
chr_master_sample_data <- merge(chr_ang, chr_srage,
by = "Sample",
all.y = TRUE)
chr_master_sample_data <- chr_master_sample_data %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.numeric, round, digits = 5)
View(chr_master_sample_data)
# CHROME STUDY
chr_ang <- read_excel("B:\\CHROME\\Plasma\\Ang1Ang2\\2023-02-08\\CHR_Ang1Ang2_20230209_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
chr_srage <- read_excel("B:\\CHROME\\Plasma\\sRAGE\\2023-02-08\\CHR_sRAGE_20230213_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
chr_master_sample_data <- merge(chr_ang, chr_srage,
by = "Sample",
all.y = TRUE)
chr_master_sample_data <- chr_master_sample_data %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.numeric, round, digits = 5)
View(chr_ang)
View(chr_srage)
View(chr_ang)
View(chr_master_sample_data)
View(chr_srage)
View(chr_master_sample_data)
# CHROME STUDY
chr_ang <- read_excel("B:\\CHROME\\Plasma\\Ang1Ang2\\2023-02-08\\CHR_Ang1Ang2_20230209_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
chr_srage <- read_excel("B:\\CHROME\\Plasma\\sRAGE\\2023-02-08\\CHR_sRAGE_20230213_ALL_PLATES_ANALYZED.xlsx",
sheet = "WideSampleData")
chr_master_sample_data <- merge(chr_ang, chr_srage,
by = "Sample",
all.x = TRUE)
chr_master_sample_data <- chr_master_sample_data %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.numeric, round, digits = 5)
chr_master_sample_data <- merge(chr_ang, chr_srage,
by = "Sample",
all.x = TRUE,
all.y = TRUE)
chr_master_sample_data <- chr_master_sample_data %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.numeric, round, digits = 5)
View(chr_master_sample_data)
# readxl allows us to read excel files
library("readxl")
# dplyr gives us data manipulation tools
library("dplyr")
raw <- read_excel("CITRC\\raw_data\\All_Ang1Ang2_Data_Set1-11.xlsx")
View(raw)
raw <- raw %>%
group_by('Detection Range')
dr_avg <- raw %>%
group_by('Detection Range') %>%
mutate(avg = average(`Calc. Concentration`))
dr_avg <- raw %>%
group_by('Detection Range') %>%
mutate(avg = mean(`Calc. Concentration`))
raw <- read_excel("CITRC\\raw_data\\All_Ang1Ang2_Data_Set1-11.xlsx")
dr_avg <- raw %>%
group_by('Detection Range') %>%
mutate(avg = mean(`Calc. Concentration`))
View(raw)
View(dr_avg)
QC <- raw %>%
filter(`Sample Group` == "QC")
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# reads in the raw data file
raw <- read_excel("Incomplete_sTREM1_ANALYZED.xlsx",
sheet = "RawData")
# creates a function that calculates CV
cv <- function(signal) {
(sd(signal)/mean(signal))*100
}
std <- raw %>%
filter(grepl("S", Sample)) %>%
filter(`Plate Name` != "Plate_25M05A6103_Set3")
s_dil <- unique(std$Sample)
std_list <- list()
std_list <- append(std_list, s_dil)
std_list
QC <- raw %>%
filter(`Sample Group` == "QC")
View(QC)
View(QC)
View(QC)
View(QC)
QC <- raw %>%
filter(`Sample Group` == "QC") %>%
group_by(`Plate Name`) %>%
mutate(x, mean(Signal))
QC <- raw %>%
filter(`Sample Group` == "QC") %>%
group_by(`Plate Name`) %>%
mutate("x", mean(Signal))
View(QC)
QC <- raw %>%
filter(`Sample Group` == "QC") %>%
group_by(`Plate Name`) %>%
mutate(x = mean(Signal))
View(QC)
QC <- raw %>%
filter(`Sample Group` == "QC") %>%
group_by(`Plate Name`) %>%
mutate(x = mean(Signal)) %>%
mutate(sd = sd(Signal))
QC <- raw %>%
filter(`Sample Group` == "QC") %>%
group_by(`Plate Name`) %>%
mutate(x = mean(Signal)) %>%
mutate(sd = sd(Signal)) %>%
mutate(y = sd/x)
View(QC)
QC <- raw %>%
filter(`Sample Group` == "QC")
View(QC)
cv(QC)
View(QC)
View(QC)
QC_signal <- QC[9]
QC_CV <- cv(QC_signal)
QC_CV <- cv(QC_signal$Signal)
QC <- raw %>%
filter(`Sample Group` == "QC") %>%
group_by(`Plate Name`) %>%
mutate(x = mean(Signal)) %>%
mutate(sd = sd(Signal)) %>%
mutate(y = sd/x)
View(QC)
QC <- raw %>%
filter(`Sample Group` == "QC") %>%
filter(`Signal` >= 10000)
QC <- raw %>%
filter(`Sample Group` == "QC") %>%
filter(`Signal` >= 10000) %>%
group_by(`Plate Name`) %>%
mutate(x = mean(Signal)) %>%
mutate(sd = sd(Signal)) %>%
mutate(y = sd/x)
QC_signal <- QC[9]
cv(QC_signal$Signal)
View(QC)
QC <- raw %>%
filter(`Sample Group` == "QC") %>%
filter(`Signal` !> 10000) %>%
QC <- raw %>%
filter(`Sample Group` == "QC") %>%
filter(`Signal` < 10000) %>%
group_by(`Plate Name`) %>%
mutate(x = mean(Signal)) %>%
mutate(sd = sd(Signal)) %>%
mutate(y = sd/x)
QC_signal <- QC[9]
cv(QC_signal$Signal)
View(QC)
