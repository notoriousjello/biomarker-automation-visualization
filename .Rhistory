# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("raw_data\\CHR_US_V1_Ang2_Plate1 (redo 12.7.22).xlsx",
sheet = "RawData")
# converts columns 14-18 with NaN into NA by transforming variable from char into numeric
raw_data[14:18] <- as.data.frame(
sapply(
raw_data[14:18],
as.numeric))
# stores a subset of columns by their index from raw_data as long_data
long_data <- raw_data[c(1,2,6:7,15:21)]
long_data <- long_data[order(
long_data$Sample),]
# selects all distinct rows in the "Sample" column of long_data
wide_data <- distinct(long_data,
Sample,
.keep_all = TRUE)
# selects the "Sample" and "Calc. Conc. Mean columns of the wide_data dataframe
wide_data <- wide_data[c(2, 7)]
# removes the blank sample
wide_data <- wide_data %>%
filter(Sample != "Blank")
# changes the column name
# CHANGE THIS TO WHATEVER BIOMARKER YOU RAN THE PLATE ON
colnames(wide_data)[2] = "Ang-2_(pg/mL)_V1"
# creates a dataframe with just samples
wide_sample <- wide_data[!is.na(as.numeric(wide_data$Sample)), ] %>%
add_column(empty_column = NA)
# converts the Sample column into a numeric data type
wide_sample$Sample <- as.numeric(as.character(wide_sample$Sample))
wide_sample <- wide_sample[order(
wide_sample$Sample),]
# standard df creation
wide_std <- wide_data %>%
filter(grepl("S", wide_data$Sample)) %>%
add_column(empty_column = NA)
colnames(wide_std) <- paste(colnames(wide_std),
"std",
sep = "_")
colnames(wide_std)[1] = "Standard"
# qc df creation
wide_qc <- long_data[c(2,7)] %>%
filter(grepl("QC", long_data$Sample)) %>%
add_column(empty_column = NA)
wide_qc$`Calc. Conc. Mean` <- mean(wide_qc$`Calc. Conc. Mean`)                  # takes mean of concentrations
wide_qc <- distinct(wide_qc,                                                    # takes distinct observations
Sample,
.keep_all = TRUE)
colnames(wide_qc)[2] = "Ang-2_(pg/mL)_V1"                                       # column renaming
colnames(wide_qc) <- paste(colnames(wide_qc),
"qc",
sep = "_")
colnames(wide_qc)[1] = "QC"
# df merging
wide_data_group <- qpcR:::cbind.na(wide_sample, wide_std, wide_qc)
# removes the standard and QC samples
wide_sample_data <- wide_data[!is.na(as.numeric(wide_data$Sample)), ]
# converts the sample column of the data frame into a numeric format
wide_sample_data$Sample <- as.numeric(as.character(wide_sample_data$Sample))
# sorts the data frame using sample
wide_sample_data <- wide_sample_data[order(
wide_sample_data$Sample), ]
# creates a new data frame looking at lowest limit of detection (LLOD)
llod <- raw_data[c(2:4, 8, 16, 19)]
# creates an LLOD dataframe with just samples
llod_sample <- llod[!is.na(as.numeric(llod$Sample)), ] %>%
add_column(empty_column = NA)
# converts the Sample column into a numeric data type
llod_sample$Sample <- as.numeric(as.character(llod_sample$Sample))
llod_sample <- llod_sample[order(
llod_sample$Sample),]
# creates an LLOD dataframe with just standards
llod_std <- llod %>%
filter(grepl("S", llod$Sample)) %>%
add_column(empty_column = NA)
colnames(llod_std) <- paste(colnames(llod_std),
"std",
sep = "_")
colnames(llod_std)[1] = "Standard"
# creates an LLOD dataframe with just QC
llod_qc <- llod %>%
filter(grepl("QC", llod$Sample)) %>%
add_column(empty_column = NA)
colnames(llod_qc) <- paste(colnames(llod_qc),
"qc",
sep = "_")
colnames(llod_qc)[1] = "QC"
# creates a data frame that tallies the number of samples with a detection range at or below the detection/fit curve
llod_count <- llod[!is.na(as.numeric(llod$Sample)), ] %>%
group_by(`Detection Range`) %>%
tally()
# converts the long data into wide format
llod_count <- pivot_wider(llod_count,
names_from = `Detection Range`,
values_from = `n`)
# merges the various llod dataframes side by side
llod_group <- qpcR:::cbind.na(llod_sample,
llod_std,
llod_qc,
llod_count)
# takes the Sample ID and Calc. Conc. CV from the long data set
intraplate_cvs <-long_data[c(2, 8)]
intraplate_cvs <- intraplate_cvs %>%
filter(Sample != "Blank")
# renaming a column
colnames(intraplate_cvs)[2] = "Ang-2 % CV"
# creating separate data frames for QC/Std/Samples to improve data clarity
intraplate_cvs_sample <- intraplate_cvs[!is.na(as.numeric(intraplate_cvs$Sample)), ] %>%
add_column(n = 2,
empty_column = NA)
intraplate_cvs_sample$Sample <- as.numeric(as.character(intraplate_cvs_sample$Sample))
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE)
intraplate_cvs_sample <- intraplate_cvs_sample[order(
intraplate_cvs_sample$Sample),]
# std
intraplate_cvs_std <- intraplate_cvs %>%
filter(grepl("S", intraplate_cvs$Sample)) %>%
add_column(n = 2,
empty_column = NA)
intraplate_cvs_std <- distinct(intraplate_cvs_std,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_std) <- paste(colnames(intraplate_cvs_std),
"std",
sep = "_")
colnames(intraplate_cvs_std)[1] = "Standard"
# qc
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
# adds a column to the QC data containing the number of QC samples
add_column(n = 4)
# renames a column to the mean of the QC
intraplate_cvs_qc$`Calc. Conc. CV` <- mean(intraplate_cvs_qc$`Calc. Conc. CV`)
intraplate_cvs_qc <- distinct(intraplate_cvs_qc,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_qc) <- paste(colnames(intraplate_cvs_qc),
"QC",
sep = "_")
colnames(intraplate_cvs_qc)[1] = "QC"
intracvs_group <- qpcR:::cbind.na(intraplate_cvs_sample,
intraplate_cvs_std,
intraplate_cvs_qc)
# creates a new spreadsheet of the listed data frames
write_xlsx(
# sets the sheet names -- format is Sheet Name = DF Name
list(RawData = raw_data,
LongData = long_data,
WideData = wide_data_group,
WideSampleData = wide_sample_data,
LLODs = llod_group,
IntraplateCVs = intracvs_group
),
# sets the path where the excel will be saved
path = "chr_test.xlsx",
# writes columns to top of file
col_names = TRUE
)
View(intraplate_cvs_qc)
# renames a column to the mean of the QC
intraplate_cvs_qc$`Calc. Conc. CV` <- mean(intraplate_cvs_qc$`Calc. Conc. CV`)
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("raw_data\\CHR_US_V1_Ang2_Plate1 (redo 12.7.22).xlsx",
sheet = "RawData")
# converts columns 14-18 with NaN into NA by transforming variable from char into numeric
raw_data[14:18] <- as.data.frame(
sapply(
raw_data[14:18],
as.numeric))
# stores a subset of columns by their index from raw_data as long_data
long_data <- raw_data[c(1,2,6:7,15:21)]
long_data <- long_data[order(
long_data$Sample),]
# selects all distinct rows in the "Sample" column of long_data
wide_data <- distinct(long_data,
Sample,
.keep_all = TRUE)
# selects the "Sample" and "Calc. Conc. Mean columns of the wide_data dataframe
wide_data <- wide_data[c(2, 7)]
# removes the blank sample
wide_data <- wide_data %>%
filter(Sample != "Blank")
# changes the column name
# CHANGE THIS TO WHATEVER BIOMARKER YOU RAN THE PLATE ON
colnames(wide_data)[2] = "Ang-2_(pg/mL)_V1"
# creates a dataframe with just samples
wide_sample <- wide_data[!is.na(as.numeric(wide_data$Sample)), ] %>%
add_column(empty_column = NA)
# converts the Sample column into a numeric data type
wide_sample$Sample <- as.numeric(as.character(wide_sample$Sample))
wide_sample <- wide_sample[order(
wide_sample$Sample),]
# standard df creation
wide_std <- wide_data %>%
filter(grepl("S", wide_data$Sample)) %>%
add_column(empty_column = NA)
colnames(wide_std) <- paste(colnames(wide_std),
"std",
sep = "_")
colnames(wide_std)[1] = "Standard"
# qc df creation
wide_qc <- long_data[c(2,7)] %>%
filter(grepl("QC", long_data$Sample)) %>%
add_column(empty_column = NA)
wide_qc$`Calc. Conc. Mean` <- mean(wide_qc$`Calc. Conc. Mean`)                  # takes mean of concentrations
wide_qc <- distinct(wide_qc,                                                    # takes distinct observations
Sample,
.keep_all = TRUE)
colnames(wide_qc)[2] = "Ang-2_(pg/mL)_V1"                                       # column renaming
colnames(wide_qc) <- paste(colnames(wide_qc),
"qc",
sep = "_")
colnames(wide_qc)[1] = "QC"
# df merging
wide_data_group <- qpcR:::cbind.na(wide_sample, wide_std, wide_qc)
# removes the standard and QC samples
wide_sample_data <- wide_data[!is.na(as.numeric(wide_data$Sample)), ]
# converts the sample column of the data frame into a numeric format
wide_sample_data$Sample <- as.numeric(as.character(wide_sample_data$Sample))
# sorts the data frame using sample
wide_sample_data <- wide_sample_data[order(
wide_sample_data$Sample), ]
# creates a new data frame looking at lowest limit of detection (LLOD)
llod <- raw_data[c(2:4, 8, 16, 19)]
# creates an LLOD dataframe with just samples
llod_sample <- llod[!is.na(as.numeric(llod$Sample)), ] %>%
add_column(empty_column = NA)
# converts the Sample column into a numeric data type
llod_sample$Sample <- as.numeric(as.character(llod_sample$Sample))
llod_sample <- llod_sample[order(
llod_sample$Sample),]
# creates an LLOD dataframe with just standards
llod_std <- llod %>%
filter(grepl("S", llod$Sample)) %>%
add_column(empty_column = NA)
colnames(llod_std) <- paste(colnames(llod_std),
"std",
sep = "_")
colnames(llod_std)[1] = "Standard"
# creates an LLOD dataframe with just QC
llod_qc <- llod %>%
filter(grepl("QC", llod$Sample)) %>%
add_column(empty_column = NA)
colnames(llod_qc) <- paste(colnames(llod_qc),
"qc",
sep = "_")
colnames(llod_qc)[1] = "QC"
# creates a data frame that tallies the number of samples with a detection range at or below the detection/fit curve
llod_count <- llod[!is.na(as.numeric(llod$Sample)), ] %>%
group_by(`Detection Range`) %>%
tally()
# converts the long data into wide format
llod_count <- pivot_wider(llod_count,
names_from = `Detection Range`,
values_from = `n`)
# merges the various llod dataframes side by side
llod_group <- qpcR:::cbind.na(llod_sample,
llod_std,
llod_qc,
llod_count)
# takes the Sample ID and Calc. Conc. CV from the long data set
intraplate_cvs <-long_data[c(2, 8)]
intraplate_cvs <- intraplate_cvs %>%
filter(Sample != "Blank")
# creating separate data frames for QC/Std/Samples to improve data clarity
intraplate_cvs_sample <- intraplate_cvs[!is.na(as.numeric(intraplate_cvs$Sample)), ] %>%
add_column(n = 2,
empty_column = NA)
intraplate_cvs_sample$Sample <- as.numeric(as.character(intraplate_cvs_sample$Sample))
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE)
intraplate_cvs_sample <- intraplate_cvs_sample[order(
intraplate_cvs_sample$Sample),]
# std
intraplate_cvs_std <- intraplate_cvs %>%
filter(grepl("S", intraplate_cvs$Sample)) %>%
add_column(n = 2,
empty_column = NA)
intraplate_cvs_std <- distinct(intraplate_cvs_std,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_std) <- paste(colnames(intraplate_cvs_std),
"std",
sep = "_")
colnames(intraplate_cvs_std)[1] = "Standard"
# qc
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
# adds a column to the QC data containing the number of QC samples
add_column(n = 4)
# renames a column to the mean of the QC
intraplate_cvs_qc$`Calc. Conc. CV` <- mean(intraplate_cvs_qc$`Calc. Conc. CV`)
intraplate_cvs_qc <- distinct(intraplate_cvs_qc,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_qc) <- paste(colnames(intraplate_cvs_qc),
"QC",
sep = "_")
colnames(intraplate_cvs_qc)[1] = "QC"
intracvs_group <- qpcR:::cbind.na(intraplate_cvs_sample,
intraplate_cvs_std,
intraplate_cvs_qc)
# creates a new spreadsheet of the listed data frames
write_xlsx(
# sets the sheet names -- format is Sheet Name = DF Name
list(RawData = raw_data,
LongData = long_data,
WideData = wide_data_group,
WideSampleData = wide_sample_data,
LLODs = llod_group,
IntraplateCVs = intracvs_group
),
# sets the path where the excel will be saved
path = "chr_test.xlsx",
# writes columns to top of file
col_names = TRUE
)
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("raw_data\\CHR_US_V1_Ang2_Plate1 (redo 12.7.22).xlsx",
sheet = "RawData")
# converts columns 14-18 with NaN into NA by transforming variable from char into numeric
raw_data[14:18] <- as.data.frame(
sapply(
raw_data[14:18],
as.numeric))
# stores a subset of columns by their index from raw_data as long_data
long_data <- raw_data[c(1,2,6:7,15:21)]
long_data <- long_data[order(
long_data$Sample),]
# selects all distinct rows in the "Sample" column of long_data
wide_data <- distinct(long_data,
Sample,
.keep_all = TRUE)
# selects the "Sample" and "Calc. Conc. Mean columns of the wide_data dataframe
wide_data <- wide_data[c(2, 7)]
# removes the blank sample
wide_data <- wide_data %>%
filter(Sample != "Blank")
# changes the column name
# CHANGE THIS TO WHATEVER BIOMARKER YOU RAN THE PLATE ON
colnames(wide_data)[2] = "Ang-2_(pg/mL)_V1"
# creates a dataframe with just samples
wide_sample <- wide_data[!is.na(as.numeric(wide_data$Sample)), ] %>%
add_column(empty_column = NA)
# converts the Sample column into a numeric data type
wide_sample$Sample <- as.numeric(as.character(wide_sample$Sample))
wide_sample <- wide_sample[order(
wide_sample$Sample),]
# standard df creation
wide_std <- wide_data %>%
filter(grepl("S", wide_data$Sample)) %>%
add_column(empty_column = NA)
colnames(wide_std) <- paste(colnames(wide_std),
"std",
sep = "_")
colnames(wide_std)[1] = "Standard"
# qc df creation
wide_qc <- long_data[c(2,7)] %>%
filter(grepl("QC", long_data$Sample)) %>%
add_column(empty_column = NA)
wide_qc$`Calc. Conc. Mean` <- mean(wide_qc$`Calc. Conc. Mean`)                  # takes mean of concentrations
wide_qc <- distinct(wide_qc,                                                    # takes distinct observations
Sample,
.keep_all = TRUE)
colnames(wide_qc)[2] = "Ang-2_(pg/mL)_V1"                                       # column renaming
colnames(wide_qc) <- paste(colnames(wide_qc),
"qc",
sep = "_")
colnames(wide_qc)[1] = "QC"
# df merging
wide_data_group <- qpcR:::cbind.na(wide_sample, wide_std, wide_qc)
# removes the standard and QC samples
wide_sample_data <- wide_data[!is.na(as.numeric(wide_data$Sample)), ]
# converts the sample column of the data frame into a numeric format
wide_sample_data$Sample <- as.numeric(as.character(wide_sample_data$Sample))
# sorts the data frame using sample
wide_sample_data <- wide_sample_data[order(
wide_sample_data$Sample), ]
# creates a new data frame looking at lowest limit of detection (LLOD)
llod <- raw_data[c(2:4, 8, 16, 19)]
# creates an LLOD dataframe with just samples
llod_sample <- llod[!is.na(as.numeric(llod$Sample)), ] %>%
add_column(empty_column = NA)
# converts the Sample column into a numeric data type
llod_sample$Sample <- as.numeric(as.character(llod_sample$Sample))
llod_sample <- llod_sample[order(
llod_sample$Sample),]
# creates an LLOD dataframe with just standards
llod_std <- llod %>%
filter(grepl("S", llod$Sample)) %>%
add_column(empty_column = NA)
colnames(llod_std) <- paste(colnames(llod_std),
"std",
sep = "_")
colnames(llod_std)[1] = "Standard"
# creates an LLOD dataframe with just QC
llod_qc <- llod %>%
filter(grepl("QC", llod$Sample)) %>%
add_column(empty_column = NA)
colnames(llod_qc) <- paste(colnames(llod_qc),
"qc",
sep = "_")
colnames(llod_qc)[1] = "QC"
# creates a data frame that tallies the number of samples with a detection range at or below the detection/fit curve
llod_count <- llod[!is.na(as.numeric(llod$Sample)), ] %>%
group_by(`Detection Range`) %>%
tally()
# converts the long data into wide format
llod_count <- pivot_wider(llod_count,
names_from = `Detection Range`,
values_from = `n`)
# merges the various llod dataframes side by side
llod_group <- qpcR:::cbind.na(llod_sample,
llod_std,
llod_qc,
llod_count)
# takes the Sample ID and Calc. Conc. CV from the long data set
intraplate_cvs <-long_data[c(2, 8)]
intraplate_cvs <- intraplate_cvs %>%
filter(Sample != "Blank")
# creating separate data frames for QC/Std/Samples to improve data clarity
intraplate_cvs_sample <- intraplate_cvs[!is.na(as.numeric(intraplate_cvs$Sample)), ] %>%
add_column(n = 2,
empty_column = NA)
intraplate_cvs_sample$Sample <- as.numeric(as.character(intraplate_cvs_sample$Sample))
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE)
intraplate_cvs_sample <- intraplate_cvs_sample[order(
intraplate_cvs_sample$Sample),]
# std
intraplate_cvs_std <- intraplate_cvs %>%
filter(grepl("S", intraplate_cvs$Sample)) %>%
add_column(n = 2,
empty_column = NA)
intraplate_cvs_std <- distinct(intraplate_cvs_std,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_std) <- paste(colnames(intraplate_cvs_std),
"std",
sep = "_")
colnames(intraplate_cvs_std)[1] = "Standard"
# qc
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
# adds a column to the QC data containing the number of QC samples
add_column(n = 4)
# renames a column to the mean of the QC
intraplate_cvs_qc$`Calc. Conc. CV` <- mean(intraplate_cvs_qc$`Calc. Conc. CV`)
intraplate_cvs_qc <- distinct(intraplate_cvs_qc,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_qc) <- paste(colnames(intraplate_cvs_qc),
"QC",
sep = "_")
colnames(intraplate_cvs_qc)[1] = "QC"
intracvs_group <- qpcR:::cbind.na(intraplate_cvs_sample,
intraplate_cvs_std,
intraplate_cvs_qc)
# creates a new spreadsheet of the listed data frames
write_xlsx(
# sets the sheet names -- format is Sheet Name = DF Name
list(RawData = raw_data,
LongData = long_data,
WideData = wide_data_group,
WideSampleData = wide_sample_data,
LLODs = llod_group,
IntraplateCVs = intracvs_group
),
# sets the path where the excel will be saved
path = "chr_test.xlsx",
# writes columns to top of file
col_names = TRUE
)
