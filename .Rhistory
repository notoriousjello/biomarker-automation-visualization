intraplate_cvs_sample <- add_count("Sample") %>%
distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE) %>%
separate(col = Sample,
into = c("Sample","Visit", "Assay"),
sep = "_")
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs
intraplate_cvs_sample <- add_count(`Sample`) %>%
distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE) %>%
separate(col = Sample,
into = c("Sample","Visit", "Assay"),
sep = "_")
intraplate_cvs_sample <- add_count(`Sample`) %>%
distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = Sample,
into = c("Sample","Visit", "Assay"),
sep = "_")
intraplate_cvs_sample <- add_count(`Sample`) %>%
distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
subset(select = -c(`Plate Name`, `Sample Group`))
intraplate_cvs_sample <- add_count(`Sample`) %>%
distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
View(intraplate_cvs_sample)
ls()
intraplate_cvs_sample <- add_count(intraplate_cvs_sample$Sample) %>%
distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
intraplate_cvs_sample <- add_count(intraplate_cvs_sample$Sample)
#-------------------------------------------------------INTRAPLATE CVs-----------------------------------------------
# takes the Sample ID and Calc. Conc. CV from the long data set
intraplate_cvs <-raw_data[,c("Sample",
"Assay",
"Calc. Conc. CV",
"Sample Group",
"Plate Name")] %>%
unite(Sample,
Sample:Assay,
sep = "_") %>%
add_count(Sample)
View(intraplate_cvs)
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
View(intraplate_cvs_sample)
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
View(intraplate_cvs_sample)
#-------------------------------------------------------INTRAPLATE CVs-----------------------------------------------
# takes the Sample ID and Calc. Conc. CV from the long data set
intraplate_cvs <-raw_data[,c("Sample",
"Assay",
"Calc. Conc. CV",
"Sample Group",
"Plate Name")] %>%
add_count(Sample)
intraplate_cvs <- intraplate_cvs %>%
filter(`Sample` != "Blanks")
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs %>%
unite(Sample,
Sample:Assay,
sep = "_") %>%
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs %>%
unite(Sample,
Sample:Assay,
sep = "_") %>%
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs %>%
unite(Sample,
Sample:Assay,
sep = "_")
View(intraplate_cvs_sample)
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
View(intraplate_cvs_sample)
subset(select = -c(`Plate Name`, `Sample Group`))
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_") %>%
subset(select = -c(`Plate Name`, `Sample Group`))
View(intraplate_cvs_sample)
intraplate_cvs_sample <- intraplate_cvs %>%
unite(Sample,
Sample:Assay,
sep = "_")
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
View(intraplate_cvs_sample)
#subset(select = -c(`Plate Name`, `Sample Group`))
intraplate_cvs_sample$Sample <- as.numeric(as.character(intraplate_cvs_sample$Sample))
intraplate_cvs_sample <- intraplate_cvs_sample %>%
drop_na(Sample)
intraplate_cvs_sample <- intraplate_cvs %>%
unite(Sample,
Sample:Assay,
sep = "_")
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
#subset(select = -c(`Plate Name`, `Sample Group`))
intraplate_cvs_sample$Sample <- as.numeric(as.character(intraplate_cvs_sample$Sample))
View(intraplate_cvs_sample)
intraplate_cvs_sample <- intraplate_cvs %>%
unite(Sample,
Sample:Assay,
sep = "_")
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Sample","Visit", "Assay"),
sep = "_")
View(intraplate_cvs_sample)
into = c("Study","Sample", "Visit", "Assay"),
intraplate_cvs_sample <- intraplate_cvs %>%
unite(Sample,
Sample:Assay,
sep = "_")
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Study","Sample", "Visit", "Assay"),
sep = "_"
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs %>%
unite(Sample,
Sample:Assay,
sep = "_")
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
`Sample`,
.keep_all = TRUE) %>%
separate(col = `Sample`,
into = c("Study","Sample", "Visit", "Assay"),
sep = "_")
View(intraplate_cvs_sample)
#subset(select = -c(`Plate Name`, `Sample Group`))
intraplate_cvs_sample$Sample <- as.numeric(as.character(intraplate_cvs_sample$Sample))
intraplate_cvs_sample <- intraplate_cvs_sample %>%
drop_na(Sample)
intraplate_cvs_sample <- intraplate_cvs_sample[order(
intraplate_cvs_sample$Sample),]
View(intraplate_cvs_sample)
#---------------------------------------------------INTRA STANDARDS--------------------------------------------------
intraplate_cvs_std <- intraplate_cvs %>%
filter(`Sample Group` == "Standards") %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_") %>%
add_count(Sample)
#---------------------------------------------------INTRA STANDARDS--------------------------------------------------
intraplate_cvs_std <- intraplate_cvs %>%
filter(`Sample Group` == "Standards") %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_")
View(intraplate_cvs_std)
View(intraplate_cvs_sample)
intraplate_cvs_std <- intraplate_cvs %>%
filter(`Sample Group` == "Standards") %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_")
intraplate_cvs_std <- distinct(intraplate_cvs_std,
Sample,
.keep_all = TRUE) %>%
subset(select = -c(`Sample Group`))
colnames(intraplate_cvs_std) <- paste(colnames(intraplate_cvs_std),
"std",
sep = "_")
colnames(intraplate_cvs_std)[1] = "Standard"
View(intraplate_cvs_std)
#---------------------------------------------------INTRA STANDARDS--------------------------------------------------
intraplate_cvs_std <- intraplate_cvs %>%
filter(`Sample Group` == "Standards") %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_")
View(intraplate_cvs_std)
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$`Sample Group`)) %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_") %>%
subset(select = -c(`Sample Group`)) %>%
add_count(Sample)
intraplate_cvs_qc <- distinct(intraplate_cvs_qc,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_qc) <- paste(colnames(intraplate_cvs_qc),
"QC",
sep = "_")
colnames(intraplate_cvs_qc)[1] = "QC"
intracvs_group <- qpcR:::cbind.na(intraplate_cvs_sample,
intraplate_cvs_std,
intraplate_cvs_qc)
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$`Sample Group`)) %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_") %>%
subset(select = -c(`Sample Group`))
View(intraplate_cvs_qc)
intraplate_cvs_qc <- distinct(intraplate_cvs_qc,
Sample,
.keep_all = TRUE)
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$`Sample Group`)) %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_") %>%
subset(select = -c(`Sample Group`))
View(intraplate_cvs_qc)
intraplate_cvs_qc <- distinct(intraplate_cvs_qc,
Sample,
.keep_all = TRUE)
View(intraplate_cvs_qc)
colnames(intraplate_cvs_qc) <- paste(colnames(intraplate_cvs_qc),
"QC",
sep = "_")
colnames(intraplate_cvs_qc)[1] = "QC"
View(intraplate_cvs_qc)
intracvs_group <- qpcR:::cbind.na(intraplate_cvs_sample,
intraplate_cvs_std,
intraplate_cvs_qc)
raw <- read_xlsx("B:\\KRI\\ICICLE\\EGF\\2023_05_23\\ICI_EGF_20230525_RAW.xlsx")
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Below Fit Curve Range"] <- -99
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Above Fit Curve Range"] <- -89
# This creates a single file of all the sets in the MSD Data rather than plate by plate
source("./automation_KRI.R")
total <- automation_KRI(raw)
write_xlsx(total,
path = "B:\\KRI\\ICICLE\\EGF\\2023_05_23\\ICI_EGF_20230525_ANALYZED.xlsx")
View(raw_data)
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Fit Curve Range"] <- -89
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Above Fit Curve Range"] <- -99
View(raw_data)
View(raw_data)
#-------------------------------------------------------LONG DATA-----------------------------------------------------
long_data <- function(raw_data) {
# stores a subset of columns from raw_data as long_data
long_data <- raw_data[,c("Plate Name",
"Sample",
"Sample Group",
"Assay",
"Dilution",
"Concentration",
"% Recovery Mean",
"Calc. Concentration",
"Calc. Conc. Mean",
"Calc. Conc. CV",
"Detection Range",
"Detection Limits: Calc. High",
"Detection Limits: Calc. Low")]
# separates the sample column into visit and sample number
long_data <- long_data %>%
separate(col = Sample,
into = c("Study","Sample", "Visit"),
sep = "_")
}
long_data(raw_data)
return(long_data)
#-------------------------------------------------------LONG DATA-----------------------------------------------------
long_data <- function(raw_data) {
# stores a subset of columns from raw_data as long_data
long_data <- raw_data[,c("Plate Name",
"Sample",
"Sample Group",
"Assay",
"Dilution",
"Concentration",
"% Recovery Mean",
"Calc. Concentration",
"Calc. Conc. Mean",
"Calc. Conc. CV",
"Detection Range",
"Detection Limits: Calc. High",
"Detection Limits: Calc. Low")]
# separates the sample column into visit and sample number
long_data <- long_data %>%
separate(col = Sample,
into = c("Study","Sample", "Visit"),
sep = "_")
return(long_data)
}
long_data(raw_data)
# stores a subset of columns from raw_data as long_data
long_data <- raw_data[,c("Plate Name",
"Sample",
"Sample Group",
"Assay",
"Dilution",
"Concentration",
"% Recovery Mean",
"Calc. Concentration",
"Calc. Conc. Mean",
"Calc. Conc. CV",
"Detection Range",
"Detection Limits: Calc. High",
"Detection Limits: Calc. Low")]
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("B:\\KRI\\ICICLE\\EGF\\2023_05_23\\ICI_EGF_20230525_RAW.xlsx") %>%
as.numeric(raw_data$`Calc. Concentration`)
as.numeric(raw_data$`Calc. Conc. Mean`)
View(raw_data)
raw_data <- as.numeric(raw_data$`Calc. Conc. Mean`)
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("B:\\KRI\\ICICLE\\EGF\\2023_05_23\\ICI_EGF_20230525_RAW.xlsx")
raw_data$`Calc. Conc. Mean` <- as.numeric
raw_data$`Calc. Conc. Mean` <- as.numeric()
raw_data$`Calc. Conc. Mean` <- as.numeric(raw_data$`Calc. Conc. Mean`)
View(raw_data)
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Fit Curve Range"] <- -89
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Above Fit Curve Range"] <- -99
View(raw_data)
return(long_data)
long_data <- function(raw_data) {
# stores a subset of columns from raw_data as long_data
long_data <- raw_data[,c("Plate Name",
"Sample",
"Sample Group",
"Assay",
"Dilution",
"Concentration",
"% Recovery Mean",
"Calc. Concentration",
"Calc. Conc. Mean",
"Calc. Conc. CV",
"Detection Range",
"Detection Limits: Calc. High",
"Detection Limits: Calc. Low")]
# separates the sample column into visit and sample number
long_data <- long_data %>%
separate(col = Sample,
into = c("Study","Sample", "Visit"),
sep = "_")
return(long_data)
}
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("B:\\KRI\\ICICLE\\EGF\\2023_05_23\\ICI_EGF_20230525_RAW.xlsx")
README <- read_excel("ReadME_Template.xlsx")
raw_data$`Calc. Conc. Mean` <- as.numeric(raw_data$`Calc. Conc. Mean`)
# makes a list of all of the plates in the plate name column
# biomarker_plates <- as.list(unique(
#   raw_data$`Plate Name`))
# print(biomarker_plates)
# # reads a specific plate from the raw data file
# raw_data <- raw_data %>%
#   filter(`Plate Name` == "Plate_23M2JAL784_Set1")
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Fit Curve Range"] <- -89
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Above Fit Curve Range"] <- -99
long_data(raw_data)
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("B:\\KRI\\ICICLE\\EGF\\2023_05_23\\ICI_EGF_20230525_RAW.xlsx")
README <- read_excel("ReadME_Template.xlsx")
raw_data$`Calc. Conc. Mean` <- as.numeric(raw_data$`Calc. Conc. Mean`)
# makes a list of all of the plates in the plate name column
# biomarker_plates <- as.list(unique(
#   raw_data$`Plate Name`))
# print(biomarker_plates)
# # reads a specific plate from the raw data file
# raw_data <- raw_data %>%
#   filter(`Plate Name` == "Plate_23M2JAL784_Set1")
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Fit Curve Range"] <- -89
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Above Fit Curve Range"] <- -99
# stores a subset of columns from raw_data as long_data
long_data <- raw_data[,c("Plate Name",
"Sample",
"Sample Group",
"Assay",
"Dilution",
"Concentration",
"% Recovery Mean",
"Calc. Concentration",
"Calc. Conc. Mean",
"Calc. Conc. CV",
"Detection Range",
"Detection Limits: Calc. High",
"Detection Limits: Calc. Low")]
# separates the sample column into visit and sample number
long_data <- long_data %>%
separate(col = Sample,
into = c("Study","Sample", "Visit"),
sep = "_")
# long_data <- function(raw_data) {
#   # stores a subset of columns from raw_data as long_data
#   long_data <- raw_data[,c("Plate Name",
#                            "Sample",
#                            "Sample Group",
#                            "Assay",
#                            "Dilution",
#                            "Concentration",
#                            "% Recovery Mean",
#                            "Calc. Concentration",
#                            "Calc. Conc. Mean",
#                            "Calc. Conc. CV",
#                            "Detection Range",
#                            "Detection Limits: Calc. High",
#                            "Detection Limits: Calc. Low")]
#
#   # separates the sample column into visit and sample number
#   long_data <- long_data %>%
#     separate(col = Sample,
#              into = c("Study","Sample", "Visit"),
#              sep = "_")
#   return(long_data)
# }
```{r}
# selects the "Sample" and "Calc. Conc. Mean columns of the wide_data dataframe
wide_data <- raw_data[,c("Sample",
"Assay",
"Sample Group",
"Calc. Conc. Mean")]
# removes the blank sample
wide_data_sample <- wide_data %>%
filter(`Sample Group` != "Blanks") %>%
separate(col = Sample,
into = c("Study","Sample", "Visit"),
sep = "_") %>%
filter(`Sample` != "NA")
#----------------------------------------------------WIDE SAMPLES----------------------------------------------------
# creates the initial dataframe
wide_sample <- wide_data_sample %>%
# concatenates columns in order to find and filter for unique observations and then separates into three new columns
unite("Sample",
Study:Assay,
sep = "_") %>%
distinct(Sample,
.keep_all = TRUE) %>%
separate("Sample",
into = c("Study","Sample", "Visit", "Assay"),
sep = "_")
View(wide_sample)
