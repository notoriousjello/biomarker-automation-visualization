sep = "_")
#----------------------------------------------------LLOD SAMPLES----------------------------------------------------
llod_sample <- llod
llod_sample$Sample <- as.numeric(as.character(llod_sample$Sample))
llod_sample <- llod_sample %>%
drop_na(Sample)
llod_sample <- llod_sample[order(
llod_sample$Sample),]
#--------------------------------------------------------LLOD STANDARDS----------------------------------------------
llod_std <- llod %>%
filter(grepl("S", llod$Sample)) %>%
subset(select = -c(Visit))
colnames(llod_std) <- paste(colnames(llod_std),
"std",
sep = "_")
colnames(llod_std)[1] = "Standard"
#---------------------------------------------------------LLOD QC----------------------------------------------------
llod_qc <- llod %>%
filter(grepl("QC", llod$Sample)) %>%
subset(select = -c(Visit))
colnames(llod_qc) <- paste(colnames(llod_qc),
"qc",
sep = "_")
colnames(llod_qc)[1] = "QC"
#---------------------------------------------------------LLOD COUNT-------------------------------------------------
# creates a data frame that tallies the number of samples with a detection range at or below the detection/fit curve
llod_count <- llod_sample %>%
group_by(`Detection Range`) %>%
tally()
# converts the long data into wide format
llod_count <- pivot_wider(llod_count,
names_from = `Detection Range`,
values_from = `n`)
# merges the various llod dataframes side by side
llod_group <- qpcR:::cbind.na(llod_sample,
llod_std,
llod_qc,
llod_count)
# takes the Sample ID and Calc. Conc. CV from the long data set
intraplate_cvs <-raw_data[,c("Sample",
"Assay",
"Calc. Conc. CV")] %>%
unite(Sample,
Sample:Assay,
sep = "_")%>%
add_count(Sample)
intraplate_cvs <- intraplate_cvs %>%
filter(Sample != "Blank") %>%
filter(Sample != "BLANK")
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE) %>%
separate(col = Sample,
into = c("Sample","Visit","Assay"),
sep = "_")
intraplate_cvs_sample$Sample <- as.numeric(as.character(intraplate_cvs_sample$Sample))
intraplate_cvs_sample <- intraplate_cvs_sample %>%
drop_na(Sample)
intraplate_cvs_sample <- intraplate_cvs_sample[order(
intraplate_cvs_sample$Sample),]
#---------------------------------------------------INTRA STANDARDS--------------------------------------------------
intraplate_cvs_std <- intraplate_cvs %>%
filter(grepl("S", intraplate_cvs$Sample))
intraplate_cvs_std <- distinct(intraplate_cvs_std,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_std) <- paste(colnames(intraplate_cvs_std),
"std",
sep = "_")
colnames(intraplate_cvs_std)[1] = "Standard"
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample))
intraplate_cvs_qc$`Calc. Conc. CV` <- as.numeric(as.character(intraplate_cvs_qc$`Calc. Conc. CV`))
intraplate_cvs_qc$`Calc. Conc. CV` <- mean(intraplate_cvs_qc$`Calc. Conc. CV`)
intraplate_cvs_qc <- distinct(intraplate_cvs_qc,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_qc) <- paste(colnames(intraplate_cvs_qc),
"QC",
sep = "_")
colnames(intraplate_cvs_qc)[1] = "QC"
intracvs_group <- qpcR:::cbind.na(intraplate_cvs_sample,
intraplate_cvs_std,
intraplate_cvs_qc)
Plots <- data.frame()
# creates a new spreadsheet of the listed data frames
write_xlsx(
# sets the sheet names -- format is Sheet Name = DF Name
list(RawData = raw_data,
LongData = long_data,
WideData = wide_data_group,
WideSampleData = wide_sample,
LLODs = llod_group,
IntraplateCVs = intracvs_group,
Plots = Plots,
README = README
),
# sets the path where the excel will be saved
path = "test.xlsx",
#path = "test_data.xlsx",
# writes columns to top of file
col_names = TRUE
)
source("~/GitHub/biomarker-automation-visualization/automation.R")
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw <- read_excel("CFA\\raw_data\\CF_US_KIM1_12222022_JL_Plates1-3.xlsx",
sheet = "RawData")
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
source("~/GitHub/biomarker-automation-visualization/automation.R")
source("~/GitHub/biomarker-automation-visualization/automation.R")
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw <- read_excel("CFA\\raw_data\\CF_US_KIM1_12222022_JL_Plates1-3.xlsx",
sheet = "RawData")
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO THE ASSAYS RUN
path = paste(x, "KIM1_PD.xlsx",
sep = "_")))
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("CFA\\raw_data\\CF_US_KIM1_12222022_JL_Plates1-3.xlsx",
sheet = "RawData")
README <- read_excel("ReadME_Template.xlsx")
# makes a list of all of the plates in the plate name column
biomarker_plates <- as.list(unique(
raw_data$`Plate Name`))
print(biomarker_plates)
# reads a specific plate from the raw data file
raw_data <- raw_data %>%
filter(`Plate Name` == "Plate_25H3TA0209_Set1")
# stores a subset of columns from raw_data as long_data
long_data <- raw_data[,c("Plate Name",
"Sample",
"Sample Group",
"Assay",
"Dilution",
"Concentration",
"% Recovery Mean",
"Calc. Concentration",
"Calc. Conc. Mean",
"Calc. Conc. CV",
"Detection Range",
"Detection Limits: Calc. High",
"Detection Limits: Calc. Low")]
# separates the sample column into visit and sample number
long_data <- raw_data %>%
separate(col = Sample,
into = c("Sample", "Visit"),
sep = "_")
View(long_data)
# selects all distinct rows in the "Sample" column of long_data
wide_data <- distinct(raw_data,
Sample,
.keep_all = TRUE)
# selects the "Sample" and "Calc. Conc. Mean columns of the wide_data dataframe
wide_data <- raw_data[,c("Sample",
"Sample Group",
"Assay",
"Calc. Conc. Mean")]
# removes the blank sample
wide_data <- wide_data %>%
filter(Sample != "Blank") %>%
filter(Sample != "BLANK")
#----------------------------------------------------WIDE SAMPLES----------------------------------------------------
# creates the initial dataframe
wide_sample <- wide_data %>%
unite("Sample",
Sample:Assay,
sep = "_") %>%
distinct(Sample,
.keep_all = TRUE) %>%
separate("Sample",
into = c("Sample", "Visit", "Assay"),
sep = "_")
# makes the sample column a numeric data type
wide_sample$Sample <- as.numeric(as.character(wide_sample$Sample))
# drops all rows in sample that are NA
wide_sample <- wide_sample %>%
drop_na(Sample)
# orders the column by sample
wide_sample <- wide_sample[order(
wide_sample$Sample),]
# pivots the long format of the original data into a wide format
wide_sample <- wide_sample %>%
pivot_wider(names_from = c(`Sample Group`,`Assay`, `Visit`),
values_from = `Calc. Conc. Mean`,
names_sep = "_")
View(wide_sample)
View(wide_data)
View(wide_sample)
View(wide_data)
#----------------------------------------------------WIDE SAMPLES----------------------------------------------------
# creates the initial dataframe
wide_sample <- wide_data %>%
unite("Sample",
Sample:Assay,
sep = "_") %>%
distinct(Sample,
.keep_all = TRUE) %>%
separate("Sample",
into = c("Sample", "Visit", "Assay"),
sep = "_")
View(wide_sample)
# selects all distinct rows in the "Sample" column of long_data
wide_data <- distinct(raw_data,
Sample,
.keep_all = TRUE)
# selects the "Sample" and "Calc. Conc. Mean columns of the wide_data dataframe
wide_data <- raw_data[,c("Sample",
"Assay",
"Sample Group",
"Calc. Conc. Mean")]
# removes the blank sample
wide_data <- wide_data %>%
filter(Sample != "Blank") %>%
filter(Sample != "BLANK")
#----------------------------------------------------WIDE SAMPLES----------------------------------------------------
# creates the initial dataframe
wide_sample <- wide_data %>%
unite("Sample",
Sample:Assay,
sep = "_") %>%
distinct(Sample,
.keep_all = TRUE) %>%
separate("Sample",
into = c("Sample", "Visit", "Assay"),
sep = "_")
View(wide_sample)
#----------------------------------------------------WIDE SAMPLES----------------------------------------------------
# creates the initial dataframe
wide_sample <- wide_data %>%
unite("Sample",
Sample:Assay,
sep = "_") %>%
distinct(Sample,
.keep_all = TRUE) %>%
separate("Sample",
into = c("Sample", "Visit", "Assay"),
sep = "_")
# makes the sample column a numeric data type
wide_sample$Sample <- as.numeric(as.character(wide_sample$Sample))
# drops all rows in sample that are NA
wide_sample <- wide_sample %>%
drop_na(Sample)
# orders the column by sample
wide_sample <- wide_sample[order(
wide_sample$Sample),]
# pivots the long format of the original data into a wide format
wide_sample <- wide_sample %>%
pivot_wider(names_from = c(`Sample Group`,`Assay`, `Visit`),
values_from = `Calc. Conc. Mean`,
names_sep = "_")
View(wide_sample)
source("~/GitHub/biomarker-automation-visualization/automation.R")
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw <- read_excel("CFA\\raw_data\\CF_US_KIM1_12222022_JL_Plates1-3.xlsx",
sheet = "RawData")
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO THE ASSAYS RUN
path = paste(x, "KIM1_PD.xlsx",
sep = "_")))
source("~/GitHub/biomarker-automation-visualization/automation.R")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw <- read_excel("CFA\\raw_data\\CF_US_KIM1_12222022_JL_Plates1-3.xlsx",
sheet = "RawData")
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO THE ASSAYS RUN
path = paste(x, "KIM1_PD.xlsx",
sep = "_")))
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw <- read_excel("CFA\\raw_data\\CF_US_KIM1_12222022_JL_Plates1-3.xlsx",
sheet = "RawData")
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO THE ASSAYS RUN
path = paste(x, "KIM1_PD.xlsx",
sep = "_")))
#-------------------------------------------------------WIDE QC------------------------------------------------------
# establishes the inital wide_qc dataframe
wide_qc <- long_data[,c("Sample",
"Visit",
"Assay",
"Calc. Conc. Mean")] %>%
filter(grepl("QC", long_data$Sample))
# converts the concentration column into a numeric value
wide_qc$`Calc. Conc. Mean` <- as.numeric(as.character(wide_qc$`Calc. Conc. Mean`))
# takes the mean of the qc samples by assay and then pivots the table into wide format
wide_qc <- wide_qc %>%
unite("Sample",
Sample:Assay,
sep = "_") %>%
group_by(Sample) %>%
summarise("Calc. Conc. Mean" = mean(`Calc. Conc. Mean`),
.groups = "drop") %>%
separate(col = Sample,
into = c("Sample", "Assay"),
sep = "_") %>%
pivot_wider(names_from = Assay,
values_from = `Calc. Conc. Mean`)
colnames(wide_qc) <- paste(colnames(wide_qc),
"qc",
sep = "_")
View(wide_qc)
#-------------------------------------------------------WIDE QC------------------------------------------------------
# establishes the inital wide_qc dataframe
wide_qc <- long_data[,c("Sample",
"Visit",
"Assay",
"Calc. Conc. Mean")] %>%
filter(grepl("QC", long_data$Sample))
# converts the concentration column into a numeric value
wide_qc$`Calc. Conc. Mean` <- as.numeric(as.character(wide_qc$`Calc. Conc. Mean`))
View(wide_qc)
# takes the mean of the qc samples by assay and then pivots the table into wide format
wide_qc <- wide_qc %>%
unite("Sample",
Sample:Assay,
sep = "_") %>%
group_by(Sample) %>%
summarise("Calc. Conc. Mean" = mean(`Calc. Conc. Mean`),
.groups = "drop") %>%
separate(col = Sample,
into = c("Sample", "Assay"),
sep = "_") %>%
pivot_wider(names_from = Assay,
values_from = `Calc. Conc. Mean`)
View(wide_qc)
#-------------------------------------------------------WIDE QC------------------------------------------------------
# establishes the inital wide_qc dataframe
wide_qc <- long_data[,c("Sample",
"Visit",
"Assay",
"Calc. Conc. Mean")] %>%
filter(grepl("QC", long_data$Sample))
# takes the mean of the qc samples by assay and then pivots the table into wide format
wide_qc <- wide_qc %>%
unite("Sample",
Sample:Assay,
sep = "_")
View(wide_qc)
# takes the mean of the qc samples by assay and then pivots the table into wide format
wide_qc <- wide_qc %>%
unite("Sample",
Sample:Assay,
sep = "_") %>%
group_by(Sample) %>%
summarise("Calc. Conc. Mean" = mean(`Calc. Conc. Mean`),
.groups = "drop") %>%
separate(col = Sample,
into = c("Sample", "Assay"),
sep = "_") %>%
pivot_wider(names_from = Assay,
values_from = `Calc. Conc. Mean`)
#-------------------------------------------------------WIDE QC------------------------------------------------------
# establishes the inital wide_qc dataframe
wide_qc <- long_data[,c("Sample",
"Assay",
"Calc. Conc. Mean")] %>%
filter(grepl("QC", long_data$Sample))
# converts the concentration column into a numeric value
wide_qc$`Calc. Conc. Mean` <- as.numeric(as.character(wide_qc$`Calc. Conc. Mean`))
# takes the mean of the qc samples by assay and then pivots the table into wide format
wide_qc <- wide_qc %>%
unite("Sample",
Sample:Assay,
sep = "_") %>%
group_by(Sample) %>%
summarise("Calc. Conc. Mean" = mean(`Calc. Conc. Mean`),
.groups = "drop") %>%
separate(col = Sample,
into = c("Sample", "Assay"),
sep = "_") %>%
pivot_wider(names_from = Assay,
values_from = `Calc. Conc. Mean`)
colnames(wide_qc) <- paste(colnames(wide_qc),
"qc",
sep = "_")
View(wide_qc)
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw <- read_excel("CFA\\raw_data\\CF_US_KIM1_12222022_JL_Plates1-3.xlsx",
sheet = "RawData")
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO THE ASSAYS RUN
path = paste(x, "KIM1_PD.xlsx",
sep = "_")))
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw <- read_excel("CITRC\\raw_data\\All_Ang1Ang2_Data_Set1-11.xlsx",
sheet = "RawData")
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
