intraplate_cvs_qc$`Calc. Conc. CV` <- as.numeric(as.character(intraplate_cvs_qc$`Calc. Conc. CV`))
intraplate_cvs_qc$`Calc. Conc. CV` <- mean(intraplate_cvs_qc$`Calc. Conc. CV`)
View(intraplate_cvs_qc)
# takes the Sample ID and Calc. Conc. CV from the long data set
intraplate_cvs <-raw_data[,c("Sample",
"Sample Group",
"Assay",
"Calc. Conc. CV",
"Plate Name")] %>%
unite(Sample,
Sample:Assay,
sep = "_")%>%
add_count(Sample)
intraplate_cvs <- intraplate_cvs %>%
filter(`Sample` != "Blanks")
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE) %>%
separate(col = Sample,
into = c("Sample","Visit","Assay"),
sep = "_") %>%
-c("Plate Name")
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE) %>%
separate(col = Sample,
into = c("Sample","Visit","Assay"),
sep = "_") %>%
subset(select(-c("Plate Name")
intraplate_cvs_sample$Sample <- as.numeric(as.character(intraplate_cvs_sample$Sample))
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE) %>%
separate(col = Sample,
into = c("Sample","Visit","Assay"),
sep = "_") %>%
subset(select(-c("Plate Name")))
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE) %>%
separate(col = Sample,
into = c("Sample","Visit","Assay"),
sep = "_") %>%
subset(select = -c("Plate Name"))
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE) %>%
separate(col = Sample,
into = c("Sample","Visit","Assay"),
sep = "_") %>%
subset(select = -c(`Plate Name`))
intraplate_cvs_sample$Sample <- as.numeric(as.character(intraplate_cvs_sample$Sample))
intraplate_cvs_sample <- intraplate_cvs_sample %>%
drop_na(Sample)
intraplate_cvs_sample <- intraplate_cvs_sample[order(
intraplate_cvs_sample$Sample),]
#---------------------------------------------------INTRA STANDARDS--------------------------------------------------
intraplate_cvs_std <- intraplate_cvs %>%
filter(grepl("S", intraplate_cvs$Sample))
intraplate_cvs_std <- distinct(intraplate_cvs_std,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_std) <- paste(colnames(intraplate_cvs_std),
"std",
sep = "_") %>%
subset(select = -c(`Plate Name`))
#---------------------------------------------------INTRA STANDARDS--------------------------------------------------
intraplate_cvs_std <- intraplate_cvs %>%
filter(grepl("S", intraplate_cvs$Sample))
intraplate_cvs_std <- distinct(intraplate_cvs_std,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_std) <- paste(colnames(intraplate_cvs_std),
"std",
sep = "_")
colnames(intraplate_cvs_std)[1] = "Standard"
View(intraplate_cvs_std)
# takes the Sample ID and Calc. Conc. CV from the long data set
intraplate_cvs <-raw_data[,c("Sample",
"Sample Group",
"Assay",
"Calc. Conc. CV",
"Plate Name")] %>%
unite(Sample,
Sample:Assay,
sep = "_")%>%
add_count(Sample)
intraplate_cvs <- intraplate_cvs %>%
filter(`Sample` != "Blanks")
#---------------------------------------------------INTRA SAMPLES----------------------------------------------------
intraplate_cvs_sample <- intraplate_cvs
intraplate_cvs_sample <- distinct(intraplate_cvs_sample,
Sample,
.keep_all = TRUE) %>%
separate(col = Sample,
into = c("Sample","Visit","Assay"),
sep = "_") %>%
subset(select = -c(`Plate Name`))
intraplate_cvs_sample$Sample <- as.numeric(as.character(intraplate_cvs_sample$Sample))
intraplate_cvs_sample <- intraplate_cvs_sample %>%
drop_na(Sample)
intraplate_cvs_sample <- intraplate_cvs_sample[order(
intraplate_cvs_sample$Sample),]
View(intraplate_cvs_sample)
#---------------------------------------------------INTRA STANDARDS--------------------------------------------------
intraplate_cvs_std <- intraplate_cvs %>%
filter(grepl("S", intraplate_cvs$Sample))
intraplate_cvs_std <- distinct(intraplate_cvs_std,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_std) <- paste(colnames(intraplate_cvs_std),
"std",
sep = "_")
colnames(intraplate_cvs_std)[1] = "Standard"
View(intraplate_cvs_std)
#---------------------------------------------------INTRA STANDARDS--------------------------------------------------
intraplate_cvs_std <- intraplate_cvs %>%
filter(grepl("S", intraplate_cvs$Sample))
intraplate_cvs_std <- distinct(intraplate_cvs_std,
Sample,
.keep_all = TRUE) %>%
subset(select = -c(`Plate Name`))
colnames(intraplate_cvs_std) <- paste(colnames(intraplate_cvs_std),
"std",
sep = "_")
colnames(intraplate_cvs_std)[1] = "Standard"
View(intraplate_cvs_std)
#---------------------------------------------------INTRA STANDARDS--------------------------------------------------
intraplate_cvs_std <- intraplate_cvs %>%
filter(grepl("S", intraplate_cvs$Sample))
intraplate_cvs_std <- distinct(intraplate_cvs_std,
Sample,
.keep_all = TRUE) %>%
subset(select = -c(`Plate Name`))
colnames(intraplate_cvs_std) <- paste(colnames(intraplate_cvs_std),
"std",
sep = "_")
colnames(intraplate_cvs_std)[1] = "Standard"
View(intraplate_cvs_std)
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
mutate('Mean Intraplate CV' = mean(as.numeric(intraplate_cvs_qc$`Calc. Conc. CV`)))
View(intraplate_cvs_qc)
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise_at(vars(`Calc. Conc. CV`,
list(mean = mean)))
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise_at(vars(`Calc. Conc. CV`,
list(name = mean)))
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise_at(vars(`Calc. Conc. CV`),
list(name = mean))
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise_at(vars(`Calc. Conc. CV`),
list(mean = mean))
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise_at(vars(`Calc. Conc. CV`),
list(mean = mean))
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise_at(vars(`Calc. Conc. CV`),
list(name = mean))
View(intraplate_cvs_qc)
View(intraplate_cvs)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample))
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise_at(vars(`Calc. Conc. CV`),
list(name = mean))
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise(vars(`Calc. Conc. CV`),
list(name = mean))
View(intraplate_cvs_qc)
funs(mean(., na.rm=TRUE))
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise_at(vars(`Calc. Conc. CV`),
funs(mean(., na.rm=TRUE)))
View(intraplate_cvs)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise(across(`Calc. Conc. CV`,
mean(na.rm = TRUE)))
na.rm = TRUE)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
summarise(across(`Calc. Conc. CV`,
mean,
na.rm = TRUE))
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
mutate('Intraplate CV' = mean(`Calc. Conc. CV`)) %>%
ungroup
View(intraplate_cvs)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
mutate('Intraplate CV' = mean(as.numeric(`Calc. Conc. CV`))) %>%
ungroup
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
mutate('Intraplate CV' = mean(as.numeric(`Calc. Conc. CV`))) %>%
ungroup
intraplate_cvs_qc <- distinct(intraplate_cvs_qc,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_qc) <- paste(colnames(intraplate_cvs_qc),
"QC",
sep = "_")
colnames(intraplate_cvs_qc)[1] = "QC"
View(intraplate_cvs_qc)
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE LOCATION OF THE RAW DATA EXCEL
raw <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO "STUDY_ASSAY_DATA_ANALYZED.xlsx
path = paste(x, "CHR_Ang1Ang2_20230209_ANALYZED.xlsx",
sep = "_")))
# This creates a single file of all the sets in the MSD Data rather than plate by plate
raw <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
source("./automation.R")
total <- automation(raw)
write_xlsx(total,
path = "CHR_Ang1Ang2_20230209_ALL_PLATES_ANALYZED.xlsx")
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
group_by(Sample) %>%
mutate('Intraplate CV' = mean(as.numeric(`Calc. Conc. CV`))) %>%
ungroup
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
unite(QC,
QC:`Plate Name`,
sep = "_")
View(intraplate_cvs)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
unite(Sample,
Sample:`Plate Name`,
sep = "_")
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
unite(Sample,
Sample:`Plate Name`,
sep = "_")
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_")
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_") %>%
group_by(Sample) %>%
mutate('Intraplate CV' = mean(as.numeric(`Calc. Conc. CV`))) %>%
ungroup
View(intraplate_cvs_qc)
#------------------------------------------------------INTRA QC------------------------------------------------------
intraplate_cvs_qc <- intraplate_cvs %>%
filter(grepl("QC", intraplate_cvs$Sample)) %>%
unite(Sample,
Sample, `Plate Name`,
sep = "_") %>%
group_by(Sample) %>%
mutate('Intraplate CV' = mean(as.numeric(`Calc. Conc. CV`))) %>%
ungroup
intraplate_cvs_qc <- distinct(intraplate_cvs_qc,
Sample,
.keep_all = TRUE)
colnames(intraplate_cvs_qc) <- paste(colnames(intraplate_cvs_qc),
"QC",
sep = "_")
colnames(intraplate_cvs_qc)[1] = "QC"
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE LOCATION OF THE RAW DATA EXCEL
raw <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO "STUDY_ASSAY_DATA_ANALYZED.xlsx
path = paste(x, "CHR_Ang1Ang2_20230209_ANALYZED.xlsx",
sep = "_")))
# This creates a single file of all the sets in the MSD Data rather than plate by plate
raw <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
source("./automation.R")
total <- automation(raw)
write_xlsx(total,
path = "CHR_Ang1Ang2_20230209_ALL_PLATES_ANALYZED.xlsx")
raw_data <- raw_data %>%
if (`Detection Range` == "Below Detection Range") {
raw_data$`Detection Range` == -89
} else if (`Detection Range` == "Above Detection Range") {
raw_data$`Detection Range` == -99
} else {}
raw_data <- raw_data %>%
if (raw_data`Detection Range` == "Below Detection Range") {
raw_data$`Detection Range` = -99
raw_data <- raw_data %>%
if (`Detection Range` = "Below Detection Range") {
raw_data$`Detection Range` == -99
raw_data <- raw_data %>%
if (`Detection Range` == "Below Detection Range") {
raw_data$`Detection Range` == -89
} else if (`Detection Range` == "Above Detection Range") {
raw_data$`Detection Range` == -99
} else {}
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Detection Range"] <- -89
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
README <- read_excel("ReadME_Template.xlsx")
# makes a list of all of the plates in the plate name column
biomarker_plates <- as.list(unique(
raw_data$`Plate Name`))
print(biomarker_plates)
# reads a specific plate from the raw data file
raw_data <- raw_data %>%
filter(`Plate Name` == "Plate_2BM80AE373_Set1")
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Detection Range"] <- -89
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
README <- read_excel("ReadME_Template.xlsx")
# makes a list of all of the plates in the plate name column
biomarker_plates <- as.list(unique(
raw_data$`Plate Name`))
print(biomarker_plates)
# reads a specific plate from the raw data file
raw_data <- raw_data %>%
filter(`Plate Name` == "Plate_2BM80AE373_Set1")
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Detection Range"] <- -89
View(raw_data)
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE RAW DATA EXCEL
raw_data <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
README <- read_excel("ReadME_Template.xlsx")
# makes a list of all of the plates in the plate name column
biomarker_plates <- as.list(unique(
raw_data$`Plate Name`))
print(biomarker_plates)
# reads a specific plate from the raw data file
raw_data <- raw_data %>%
filter(`Plate Name` == "Plate_2BM80AE373_Set1")
raw_data$`Calc. Conc. Mean`[raw_data$`Detection Range` == "Below Fit Curve Range"] <- -89
View(raw_data)
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# qpcR lets us merge data frames side by side
library("qpcR")
# reads the raw data excel file and stores it as a variable
# FOR NEW USERS:
#     CHANGE THE PATH IN THE read_excel FUNCTION TO THE LOCATION OF THE RAW DATA EXCEL
raw <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Below Fit Curve Range"] <- -89
raw$`Calc. Conc. Mean`[raw$`Detection Range` == "Above Fit Curve Range"] <- -99
# reads in the automation script as a callable function
source("./automation.R")
# splits the raw data into separate plate based data frames
split_plates <- split(raw ,
raw$`Plate Name`)
# applies the automation function to the various split plates
plate_dataframes <- lapply(split_plates, automation)
# writes multiple excel files using the list of data frames above
lapply(names(plate_dataframes),
function(x) write_xlsx(plate_dataframes[[x]],
# CHANGE THIS TO "STUDY_ASSAY_DATA_ANALYZED.xlsx
path = paste(x, "CHR_Ang1Ang2_20230209_ANALYZED.xlsx",
sep = "_")))
# This creates a single file of all the sets in the MSD Data rather than plate by plate
raw <- read_excel("CHROME//raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
source("./automation.R")
total <- automation(raw)
write_xlsx(total,
path = "CHR_Ang1Ang2_20230209_ALL_PLATES_ANALYZED.xlsx")
# tidyverse allows us to do our data processing
library("tidyverse")
# readxl allows us to read excel files
library("readxl")
# writexl allows us to write to excel files
library("writexl")
# tidyr lets us reshape our long data into wide data
library("tidyr")
# imports the raw data excel file
raw <- read_excel("raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
# separates out the raw data to append an identifier to PE samples
raw_std <- raw %>%
filter(`Sample Group` == "Standards")
raw_qc <- raw %>%
filter(`Sample Group` == "QC")
raw_pe <- raw %>%
filter(`Sample Group` == "PE")
raw_blanks <- raw %>%
filter(`Sample Group` == "Blanks")
# appends the identifier
raw_pe$Sample <- paste(raw_pe$Sample, "V1",
sep = "_")
# binds the data back into a single data frame
raw <- rbind(raw_std, raw_qc, raw_pe, raw_blanks)
# writes the new raw data file to an excel
write_xlsx(raw,
path = "raw_data//CHR_Ang1Ang2_02_08_23_RAW.xlsx")
View(raw)
